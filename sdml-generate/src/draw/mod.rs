/*!
One-line description.

More detailed description, with

# Example

YYYYY

*/

use crate::exec::CommandArg;

// ------------------------------------------------------------------------------------------------
// Public Macros
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Public Types
// ------------------------------------------------------------------------------------------------

#[derive(Clone, Debug, PartialEq, Eq)]
pub enum OutputFormat {
    Source,
    ImageJpeg,
    ImagePng,
    ImageSvg,
}

// ------------------------------------------------------------------------------------------------
// Public Functions
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Private Macros
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Private Types
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Implementations
// ------------------------------------------------------------------------------------------------

impl From<OutputFormat> for CommandArg {
    fn from(value: OutputFormat) -> Self {
        CommandArg::new_option(
            "-T",
            match value {
                OutputFormat::ImageJpeg => "jpg",
                OutputFormat::ImagePng => "png",
                OutputFormat::ImageSvg => "svg",
                _ => unreachable!(),
            },
        )
    }
}

// ------------------------------------------------------------------------------------------------
// Private Functions
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Modules
// ------------------------------------------------------------------------------------------------

pub mod concepts;

pub mod erd;

pub mod uml;
